// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  locations     Location[]
  Observation   Observation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id     String @id @default(cuid())
  userId String

  name      String
  latitude  Float
  longitude Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Observation Observation[]
}

model Observation {
  id         String @id @default(cuid())
  userId     String
  locationId String

  longitude Float
  latitude  Float

  amount1       Int
  amount2       Int
  amount3       Int
  time          DateTime
  habitat       Habitat_type
  mowed         Boolean
  temperature   Float
  precipitation Precipitation_type
  wind          Wind_type
  cloud         Cloud_type
  light         Artificial_light_type
  pattern       Pattern_type
  patternDesc   String?
  notes         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

enum Habitat_type {
  field
  lawn
  wetland
  forest
  pavement
  other
}

enum Precipitation_type {
  foggy
  light_rain
  heavy_rain
  none
}

enum Wind_type {
  calm
  light
  strong
}

enum Cloud_type {
  clear
  partly_cloudy
  overcast
}

enum Artificial_light_type {
  none
  within_habitat
  near_habitat
  far_habitat
}

enum Pattern_type {
  none
  one
  two
  three
}
